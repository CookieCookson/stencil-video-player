/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import { ControlBar as ControlBar } from './components/control-bar/control-bar';

interface HTMLControlBarElement extends ControlBar, HTMLElement {
}
declare var HTMLControlBarElement: {
  prototype: HTMLControlBarElement;
  new (): HTMLControlBarElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "control-bar": HTMLControlBarElement;
  }
  interface ElementTagNameMap {
      "control-bar": HTMLControlBarElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "control-bar": JSXElements.ControlBarAttributes;
      }
  }
  namespace JSXElements {
      export interface ControlBarAttributes extends HTMLAttributes {
        
          visible?: any
      }
  }
}

import { FullscreenButton as FullscreenButton } from './components/fullscreen-button/fullscreen-button';

interface HTMLFullscreenButtonElement extends FullscreenButton, HTMLElement {
}
declare var HTMLFullscreenButtonElement: {
  prototype: HTMLFullscreenButtonElement;
  new (): HTMLFullscreenButtonElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "fullscreen-button": HTMLFullscreenButtonElement;
  }
  interface ElementTagNameMap {
      "fullscreen-button": HTMLFullscreenButtonElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "fullscreen-button": JSXElements.FullscreenButtonAttributes;
      }
  }
  namespace JSXElements {
      export interface FullscreenButtonAttributes extends HTMLAttributes {
        
          fullscreen?: boolean | "true" | "false"
      }
  }
}

import { MuteButton as MuteButton } from './components/mute-button/mute-button';

interface HTMLMuteButtonElement extends MuteButton, HTMLElement {
}
declare var HTMLMuteButtonElement: {
  prototype: HTMLMuteButtonElement;
  new (): HTMLMuteButtonElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "mute-button": HTMLMuteButtonElement;
  }
  interface ElementTagNameMap {
      "mute-button": HTMLMuteButtonElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "mute-button": JSXElements.MuteButtonAttributes;
      }
  }
  namespace JSXElements {
      export interface MuteButtonAttributes extends HTMLAttributes {
        
          muted?: boolean | "true" | "false"
      }
  }
}

import { PlayButton as PlayButton } from './components/play-button/play-button';

interface HTMLPlayButtonElement extends PlayButton, HTMLElement {
}
declare var HTMLPlayButtonElement: {
  prototype: HTMLPlayButtonElement;
  new (): HTMLPlayButtonElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "play-button": HTMLPlayButtonElement;
  }
  interface ElementTagNameMap {
      "play-button": HTMLPlayButtonElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "play-button": JSXElements.PlayButtonAttributes;
      }
  }
  namespace JSXElements {
      export interface PlayButtonAttributes extends HTMLAttributes {
        
          playing?: boolean | "true" | "false"
      }
  }
}

import { ScrubBar as ScrubBar } from './components/scrub-bar/scrub-bar';

interface HTMLScrubBarElement extends ScrubBar, HTMLElement {
}
declare var HTMLScrubBarElement: {
  prototype: HTMLScrubBarElement;
  new (): HTMLScrubBarElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "scrub-bar": HTMLScrubBarElement;
  }
  interface ElementTagNameMap {
      "scrub-bar": HTMLScrubBarElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "scrub-bar": JSXElements.ScrubBarAttributes;
      }
  }
  namespace JSXElements {
      export interface ScrubBarAttributes extends HTMLAttributes {
        
          progress?: number,
          duration?: number,
          thumbnails?: any
      }
  }
}

import { SubtitlesButton as SubtitlesButton } from './components/subtitles-button/subtitles-button';

interface HTMLSubtitlesButtonElement extends SubtitlesButton, HTMLElement {
}
declare var HTMLSubtitlesButtonElement: {
  prototype: HTMLSubtitlesButtonElement;
  new (): HTMLSubtitlesButtonElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "subtitles-button": HTMLSubtitlesButtonElement;
  }
  interface ElementTagNameMap {
      "subtitles-button": HTMLSubtitlesButtonElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "subtitles-button": JSXElements.SubtitlesButtonAttributes;
      }
  }
  namespace JSXElements {
      export interface SubtitlesButtonAttributes extends HTMLAttributes {
        
          enabled?: boolean | "true" | "false"
      }
  }
}

import { ThumbnailPreview as ThumbnailPreview } from './components/thumbnail-preview/thumbnail-preview';

interface HTMLThumbnailPreviewElement extends ThumbnailPreview, HTMLElement {
}
declare var HTMLThumbnailPreviewElement: {
  prototype: HTMLThumbnailPreviewElement;
  new (): HTMLThumbnailPreviewElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "thumbnail-preview": HTMLThumbnailPreviewElement;
  }
  interface ElementTagNameMap {
      "thumbnail-preview": HTMLThumbnailPreviewElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "thumbnail-preview": JSXElements.ThumbnailPreviewAttributes;
      }
  }
  namespace JSXElements {
      export interface ThumbnailPreviewAttributes extends HTMLAttributes {
        
          options?: any
      }
  }
}

import { TimeLabel as TimeLabel } from './components/time-label/time-label';

interface HTMLTimeLabelElement extends TimeLabel, HTMLElement {
}
declare var HTMLTimeLabelElement: {
  prototype: HTMLTimeLabelElement;
  new (): HTMLTimeLabelElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "time-label": HTMLTimeLabelElement;
  }
  interface ElementTagNameMap {
      "time-label": HTMLTimeLabelElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "time-label": JSXElements.TimeLabelAttributes;
      }
  }
  namespace JSXElements {
      export interface TimeLabelAttributes extends HTMLAttributes {
        
          time?: number
      }
  }
}

import { VideoElement as VideoElement } from './components/video-element/video-element';

interface HTMLVideoElementElement extends VideoElement, HTMLElement {
}
declare var HTMLVideoElementElement: {
  prototype: HTMLVideoElementElement;
  new (): HTMLVideoElementElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "video-element": HTMLVideoElementElement;
  }
  interface ElementTagNameMap {
      "video-element": HTMLVideoElementElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "video-element": JSXElements.VideoElementAttributes;
      }
  }
  namespace JSXElements {
      export interface VideoElementAttributes extends HTMLAttributes {
        
          playVideo?: any,
          pauseVideo?: any,
          muteVideo?: any,
          unmuteVideo?: any,
          seekTo?: any,
          setVolume?: any,
          enterFullscreen?: any,
          toggleSubtitles?: any,
          src?: any,
          poster?: any,
          thumbs?: any,
          subtitles?: any
      }
  }
}

import { VideoPlayer as VideoPlayer } from './components/video-player/video-player';

interface HTMLVideoPlayerElement extends VideoPlayer, HTMLElement {
}
declare var HTMLVideoPlayerElement: {
  prototype: HTMLVideoPlayerElement;
  new (): HTMLVideoPlayerElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "video-player": HTMLVideoPlayerElement;
  }
  interface ElementTagNameMap {
      "video-player": HTMLVideoPlayerElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "video-player": JSXElements.VideoPlayerAttributes;
      }
  }
  namespace JSXElements {
      export interface VideoPlayerAttributes extends HTMLAttributes {
        
      }
  }
}

import { VolumeBar as VolumeBar } from './components/volume-bar/volume-bar';

interface HTMLVolumeBarElement extends VolumeBar, HTMLElement {
}
declare var HTMLVolumeBarElement: {
  prototype: HTMLVolumeBarElement;
  new (): HTMLVolumeBarElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "volume-bar": HTMLVolumeBarElement;
  }
  interface ElementTagNameMap {
      "volume-bar": HTMLVolumeBarElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "volume-bar": JSXElements.VolumeBarAttributes;
      }
  }
  namespace JSXElements {
      export interface VolumeBarAttributes extends HTMLAttributes {
        
          level?: number
      }
  }
}

